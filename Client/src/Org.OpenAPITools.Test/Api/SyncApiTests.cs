/*
 * Range-Based Set Synchronization Framework
 *
 * This is a simple Framework to synchronize range-based sets.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: u.kuehn@tu-berlin.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SyncApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SyncApiTests : IDisposable
    {
        private SyncApi instance;

        public SyncApiTests()
        {
            instance = new SyncApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SyncApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SyncApi
            //Assert.IsType<SyncApi>(instance);
        }

        /// <summary>
        /// Test SyncPost
        /// </summary>
        [Fact]
        public void SyncPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ValidateStep? validateStep = null;
            //var response = instance.SyncPost(validateStep);
            //Assert.IsType<SyncState>(response);
        }

        /// <summary>
        /// Test SyncPut
        /// </summary>
        [Fact]
        public void SyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SyncState? syncState = null;
            //var response = instance.SyncPut(syncState);
            //Assert.IsType<SyncState>(response);
        }
    }
}
