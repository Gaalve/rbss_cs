/* 
 * Range-Based Set Synchronization Framework
 *
 * This is a simple Framework to synchronize range-based sets.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: u.kuehn@tu-berlin.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SyncBody1
    /// </summary>
    [DataContract]
        public partial class SyncBody1 :  IEquatable<SyncBody1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncBody1" /> class.
        /// </summary>
        /// <param name="idFrom">The Id from what the sync process may start.</param>
        /// <param name="idNext">The Id latest the sync process have to work.</param>
        /// <param name="fpOfData">The fingerprint for the data available.</param>
        public SyncBody1(string idFrom = default(string), string idNext = default(string), string fpOfData = default(string))
        {
            this.IdFrom = idFrom;
            this.IdNext = idNext;
            this.FpOfData = fpOfData;
        }
        
        /// <summary>
        /// The Id from what the sync process may start
        /// </summary>
        /// <value>The Id from what the sync process may start</value>
        [DataMember(Name="idFrom", EmitDefaultValue=false)]
        public string IdFrom { get; set; }

        /// <summary>
        /// The Id latest the sync process have to work
        /// </summary>
        /// <value>The Id latest the sync process have to work</value>
        [DataMember(Name="idNext", EmitDefaultValue=false)]
        public string IdNext { get; set; }

        /// <summary>
        /// The fingerprint for the data available
        /// </summary>
        /// <value>The fingerprint for the data available</value>
        [DataMember(Name="fpOfData", EmitDefaultValue=false)]
        public string FpOfData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncBody1 {\n");
            sb.Append("  IdFrom: ").Append(IdFrom).Append("\n");
            sb.Append("  IdNext: ").Append(IdNext).Append("\n");
            sb.Append("  FpOfData: ").Append(FpOfData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncBody1);
        }

        /// <summary>
        /// Returns true if SyncBody1 instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncBody1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncBody1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdFrom == input.IdFrom ||
                    (this.IdFrom != null &&
                    this.IdFrom.Equals(input.IdFrom))
                ) && 
                (
                    this.IdNext == input.IdNext ||
                    (this.IdNext != null &&
                    this.IdNext.Equals(input.IdNext))
                ) && 
                (
                    this.FpOfData == input.FpOfData ||
                    (this.FpOfData != null &&
                    this.FpOfData.Equals(input.FpOfData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdFrom != null)
                    hashCode = hashCode * 59 + this.IdFrom.GetHashCode();
                if (this.IdNext != null)
                    hashCode = hashCode * 59 + this.IdNext.GetHashCode();
                if (this.FpOfData != null)
                    hashCode = hashCode * 59 + this.FpOfData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
