/*
 * Range-Based Set Synchronization Framework
 *
 * This is a simple Framework to synchronize range-based sets.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: u.kuehn@tu-berlin.de
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPIToolsServer.Converters;

namespace Org.OpenAPIToolsServer.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class InsertStep : IEquatable<InsertStep>
    {
        /// <summary>
        /// Gets or Sets IdFrom
        /// </summary>
        [DataMember(Name="idFrom", EmitDefaultValue=false)]
        public string IdFrom { get; set; }

        /// <summary>
        /// Gets or Sets IdNext
        /// </summary>
        [DataMember(Name="idNext", EmitDefaultValue=false)]
        public List<string> IdNext { get; set; }

        /// <summary>
        /// Gets or Sets IdTo
        /// </summary>
        [DataMember(Name="idTo", EmitDefaultValue=false)]
        public string IdTo { get; set; }

        /// <summary>
        /// should be handled, outside see page 48, or use hash in calculation &#x3D;&gt; conflict have to be solved
        /// </summary>
        /// <value>should be handled, outside see page 48, or use hash in calculation &#x3D;&gt; conflict have to be solved</value>
        [DataMember(Name="dataToInsert", EmitDefaultValue=false)]
        public List<SimpleDataObject> DataToInsert { get; set; }

        /// <summary>
        /// both have to be update dataToInsert in their own set (\&quot;recursion anker\&quot;)
        /// </summary>
        /// <value>both have to be update dataToInsert in their own set (\&quot;recursion anker\&quot;)</value>
        [DataMember(Name="handled", EmitDefaultValue=false)]
        public bool Handled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InsertStep {\n");
            sb.Append("  IdFrom: ").Append(IdFrom).Append("\n");
            sb.Append("  IdNext: ").Append(IdNext).Append("\n");
            sb.Append("  IdTo: ").Append(IdTo).Append("\n");
            sb.Append("  DataToInsert: ").Append(DataToInsert).Append("\n");
            sb.Append("  Handled: ").Append(Handled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InsertStep)obj);
        }

        /// <summary>
        /// Returns true if InsertStep instances are equal
        /// </summary>
        /// <param name="other">Instance of InsertStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsertStep other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdFrom == other.IdFrom ||
                    IdFrom != null &&
                    IdFrom.Equals(other.IdFrom)
                ) && 
                (
                    IdNext == other.IdNext ||
                    IdNext != null &&
                    other.IdNext != null &&
                    IdNext.SequenceEqual(other.IdNext)
                ) && 
                (
                    IdTo == other.IdTo ||
                    IdTo != null &&
                    IdTo.Equals(other.IdTo)
                ) && 
                (
                    DataToInsert == other.DataToInsert ||
                    DataToInsert != null &&
                    other.DataToInsert != null &&
                    DataToInsert.SequenceEqual(other.DataToInsert)
                ) && 
                (
                    Handled == other.Handled ||
                    
                    Handled.Equals(other.Handled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdFrom != null)
                    hashCode = hashCode * 59 + IdFrom.GetHashCode();
                    if (IdNext != null)
                    hashCode = hashCode * 59 + IdNext.GetHashCode();
                    if (IdTo != null)
                    hashCode = hashCode * 59 + IdTo.GetHashCode();
                    if (DataToInsert != null)
                    hashCode = hashCode * 59 + DataToInsert.GetHashCode();
                    
                    hashCode = hashCode * 59 + Handled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InsertStep left, InsertStep right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InsertStep left, InsertStep right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
