/*
 * Range-Based Set Synchronization Framework
 *
 * This is a simple Framework to synchronize range-based sets.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: u.kuehn@tu-berlin.de
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPIToolsServer.Converters;

namespace Org.OpenAPIToolsServer.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class SyncSteps : IEquatable<SyncSteps>
    {
        /// <summary>
        /// timestap packet has been sent
        /// </summary>
        /// <value>timestap packet has been sent</value>
        [DataMember(Name="timeSent", EmitDefaultValue=false)]
        public long TimeSent { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public List<Step> Steps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncSteps {\n");
            sb.Append("  TimeSent: ").Append(TimeSent).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SyncSteps)obj);
        }

        /// <summary>
        /// Returns true if SyncSteps instances are equal
        /// </summary>
        /// <param name="other">Instance of SyncSteps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncSteps other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TimeSent == other.TimeSent ||
                    
                    TimeSent.Equals(other.TimeSent)
                ) && 
                (
                    Steps == other.Steps ||
                    Steps != null &&
                    other.Steps != null &&
                    Steps.SequenceEqual(other.Steps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + TimeSent.GetHashCode();
                    if (Steps != null)
                    hashCode = hashCode * 59 + Steps.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SyncSteps left, SyncSteps right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncSteps left, SyncSteps right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
