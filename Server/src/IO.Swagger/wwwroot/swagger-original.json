{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Range-Based Set Synchronization Framework",
    "description" : "This is a simple Framework to synchronize range-based sets.",
    "contact" : {
      "email" : "u.kuehn@tu-berlin.de"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "0.1.0"
  },
  "servers" : [ {
    "url" : "http://localhost:7042",
    "description" : "Development server"
  } ],
  "tags" : [ {
    "name" : "sync",
    "description" : "endpoints for data synchronization"
  }, {
    "name" : "modify",
    "description" : "endpoints for data manipulation"
  } ],
  "paths" : {
    "/sync" : {
      "put" : {
        "tags" : [ "sync" ],
        "description" : "Checks required actions for given list of sync steps",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/sync_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns information neighter an sync process is started or sync is done",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "sync" ],
        "description" : "Checks if the fingerprint of own data matches the given fingerprint and optionally starts an asynchronous process to handle subset syncronization, if not",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/sync_body_1"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns information neighter an sync process is started or sync is done",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          }
        }
      }
    },
    "/insert" : {
      "post" : {
        "tags" : [ "modify" ],
        "description" : "Inserts a new data item into the data set and starts asynchronous synchronization with peer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/insert_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns information about success by insterting data"
          }
        }
      }
    },
    "/update" : {
      "post" : {
        "tags" : [ "modify" ],
        "description" : "(Not to be implement yet) Updates an existing data item into the data set and starts asynchronous synchronization with peer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/update_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns information about success by updating data"
          }
        }
      }
    },
    "/delete" : {
      "post" : {
        "tags" : [ "modify" ],
        "description" : "(Not to be implement yet) Deletes an existing data item into the data set and starts asynchronous synchronization with peer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/delete_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns information about success by deleting data"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "SimpleDataObject" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "unique identifier"
          },
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "SyncSteps" : {
        "type" : "object",
        "properties" : {
          "timeSent" : {
            "type" : "number",
            "description" : "timestap packet has been sent",
            "format" : "int64"
          },
          "steps" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Step"
            }
          }
        }
      },
      "Step" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "description" : "internal identifier for step sended",
            "format" : "int64"
          },
          "currentStep" : {
            "anyOf" : [ {
              "$ref" : "#/components/schemas/ValidateStep"
            }, {
              "$ref" : "#/components/schemas/InsertStep"
            } ]
          }
        }
      },
      "ValidateStep" : {
        "type" : "object",
        "properties" : {
          "idFrom" : {
            "type" : "string"
          },
          "idTo" : {
            "type" : "string"
          },
          "fpOfData" : {
            "type" : "string"
          }
        }
      },
      "InsertStep" : {
        "type" : "object",
        "properties" : {
          "idFrom" : {
            "type" : "string"
          },
          "idNext" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "idTo" : {
            "type" : "string"
          },
          "dataToInsert" : {
            "type" : "array",
            "description" : "should be handled, outside see page 48, or use hash in calculation => conflict have to be solved",
            "items" : {
              "$ref" : "#/components/schemas/SimpleDataObject"
            }
          },
          "handled" : {
            "type" : "boolean",
            "description" : "both have to be update dataToInsert in their own set (\"recursion anker\")"
          }
        }
      },
      "sync_body" : {
        "required" : [ "syncstate" ],
        "properties" : {
          "syncstate" : {
            "type" : "object",
            "description" : "Information about next steps, empty when done",
            "allOf" : [ {
              "$ref" : "#/components/schemas/SyncSteps"
            } ]
          }
        }
      },
      "inline_response_200" : {
        "properties" : {
          "syncstate" : {
            "type" : "object",
            "description" : "Information about next steps, empty when done",
            "allOf" : [ {
              "$ref" : "#/components/schemas/SyncSteps"
            } ]
          }
        },
        "example" : {
          "syncstate" : ""
        }
      },
      "sync_body_1" : {
        "required" : [ "idFrom,idNext,fpOfData" ],
        "properties" : {
          "idFrom" : {
            "type" : "string",
            "description" : "The Id from what the sync process may start"
          },
          "idNext" : {
            "type" : "string",
            "description" : "The Id latest the sync process have to work"
          },
          "fpOfData" : {
            "type" : "string",
            "description" : "The fingerprint for the data available"
          }
        }
      },
      "insert_body" : {
        "required" : [ "data" ],
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/SimpleDataObject"
          }
        }
      },
      "update_body" : {
        "required" : [ "data" ],
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/SimpleDataObject"
          }
        }
      },
      "delete_body" : {
        "required" : [ "data" ],
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/SimpleDataObject"
          }
        }
      }
    }
  }
}
